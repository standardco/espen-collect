import dependencies.Versions
apply from: 'secrets.gradle'

// Plugin for detecting outdated dependencies. Run './gradlew dependencyUpdates' to generate a report.
apply plugin: "com.github.ben-manes.versions"

// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        google()

        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:8.0.2'
        classpath 'com.google.gms:google-services:4.3.15'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.9.6'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.22"
        classpath "org.jlleitschuh.gradle:ktlint-gradle:11.4.2"
        classpath "com.github.ben-manes:gradle-versions-plugin:0.47.0"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:2.6.0"
        classpath "com.google.android.gms:oss-licenses-plugin:0.10.6"
    }
}

allprojects {
    repositories {
        maven {
            url "${rootDir}/.local-m2/"
            metadataSources {
                mavenPom()
                artifact() // Supports artifact only dependencies like those from medicmobile repo
            }
        }

        // Needs to go first to get specialty libraries https://stackoverflow.com/a/48438866/137744
        google()

        mavenLocal() // Only used for javarosa_local dependency
        mavenCentral()

        maven { url 'https://oss.sonatype.org/content/groups/public' }
        maven { url 'https://jitpack.io' }
        maven {
            url 'https://staging.dev.medicmobile.org/_couch/maven-repo'
            metadataSources { artifact() }
        }

        maven {
            url 'https://api.mapbox.com/downloads/v2/releases/maven'
            authentication {
                basic(BasicAuthentication)
            }
            credentials {
                username = "mapbox"
                password = getSecrets().getProperty('MAPBOX_DOWNLOADS_TOKEN', '')
            }
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            freeCompilerArgs = ['-Xjvm-default=all']
            jvmTarget = '17'
        }
    }
}

configurations.all {
    transitive = true
}

task checkCode(type: GradleBuild) {
    tasks = ['pmd', 'ktlintCheck', 'checkstyle', 'lintDebug']
}

task checkTests(type: GradleBuild) {
    tasks = ['testDebugUnitTest', 'connectedDebugAndroidTest']
}

task checkAll(type: GradleBuild) {
    tasks = ['checkCode', 'checkTests']
}

task checkFeature(type: GradleBuild) {
    tasks = ["connectedDebugAndroidTest"]
    startParameter.projectProperties = ["android.testInstrumentationRunnerArguments.package": "org.espen.collect.android.feature"]
}

task checkRegression(type: GradleBuild) {
    tasks = ["connectedDebugAndroidTest"]
    startParameter.projectProperties = ["android.testInstrumentationRunnerArguments.package": "org.espen.collect.android.regression"]
}

task checkInstrumented(type: GradleBuild) {
    tasks = ["connectedDebugAndroidTest"]
    startParameter.projectProperties = ["android.testInstrumentationRunnerArguments.package": "org.espen.collect.android.instrumented"]
}

// Create local Maven repo from cached Gradle dependencies
task cacheToMavenLocal(type: Sync) {
    from new File(gradle.gradleUserHomeDir, 'caches/modules-2/files-2.1')
    into "${rootDir}/.local-m2"

    duplicatesStrategy = 'include'

    // Convert from Gradle cache to Maven format
    eachFile {
        List<String> parts = it.path.split('/')
        it.path = parts[0].replace('.','/') +
                '/' + parts[1] +
                '/' + parts[2] +
                '/' + parts[4]
    }

    includeEmptyDirs false
}
