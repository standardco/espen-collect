apply plugin: 'com.android.application'
apply from: '../config/quality.gradle'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: "com.google.android.gms.oss-licenses-plugin"

import com.android.ddmlib.DdmPreferences
import dependencies.Dependencies
import dependencies.Versions

DdmPreferences.setTimeOut(60000)

ant.condition(property: 'os', value: 'windows') {
    os(family: 'windows')
}
ant.condition(property: 'os', value: 'unix') {
    os(family: 'unix')
}

// Build numbers were manually set until 1067
def LEGACY_BUILD_NUMBER_OFFSET = 1067

// Based on http://stackoverflow.com/questions/17097263#24121734
def getMasterCommitCount = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            switch (ant.properties.os) {
                case 'windows':
                    commandLine 'cmd', '/c', 'git', 'rev-list', '--first-parent', '--count', 'master'
                    break
                case 'unix':
                    commandLine 'git', 'rev-list', '--first-parent', '--count', 'master'
                    break
            }
            standardOutput = stdout
        }
        return Integer.parseInt(stdout.toString().trim())
    } catch (ignored) {
        return -1
    }
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            switch (ant.properties.os) {
                case 'windows':
                    commandLine 'cmd', '/c', 'git', 'describe', '--tags', '--dirty', '--always'
                    break
                case 'unix':
                    commandLine 'git', 'describe', '--tags', '--dirty', '--always'
                    break
            }
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (ignored) {
        return null
    }
}

def secrets = getSecrets()
def googleMapsApiKey = secrets.getProperty('GOOGLE_MAPS_API_KEY', '')
def mapboxAccessToken = secrets.getProperty('MAPBOX_ACCESS_TOKEN', '')
def entitiesFilterTestProjectUrl = secrets.getProperty('ENTITIES_FILTER_TEST_PROJECT_URL', '')
def entitiesFilterSearchTestProjectUrl = secrets.getProperty('ENTITIES_FILTER_SEARCH_TEST_PROJECT_URL', '')

android {
    compileSdk Versions.android_compile_sdk

    buildFeatures {
        viewBinding true
        buildConfig true
    }

    defaultConfig {
        applicationId('org.odk.collect.android')
        minSdkVersion Versions.android_min_sdk
        targetSdkVersion Versions.android_target_sdk
        versionCode LEGACY_BUILD_NUMBER_OFFSET + getMasterCommitCount()
        //versionName getVersionName()
        //https://github.com/getodk/collect/tree/v2024.3.6
        versionName "v2024.3.6"
        testInstrumentationRunner('androidx.test.runner.AndroidJUnitRunner')
        vectorDrawables.useSupportLibrary = true
        archivesBaseName = 'collect'
    }

    signingConfigs {
        release {
            if (secrets.getProperty('RELEASE_STORE_FILE')) {
                storeFile file(secrets.getProperty('RELEASE_STORE_FILE'))
                storePassword secrets.getProperty('RELEASE_STORE_PASSWORD')
                keyAlias secrets.getProperty('RELEASE_KEY_ALIAS')
                keyPassword secrets.getProperty('RELEASE_KEY_PASSWORD')
            }
        }

        selfSignedRelease {
            storeFile file('../debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {

        // Release build for all forks
        release {
            if (secrets.getProperty('RELEASE_STORE_FILE')) {
                signingConfig signingConfigs.release
            }
            minifyEnabled(true)
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            resValue("string", "GOOGLE_MAPS_API_KEY", googleMapsApiKey)
            resValue("string", "mapbox_access_token", mapboxAccessToken)
        }

        // Release build for the official ODK Collect app
        odkCollectRelease {
            if (secrets.getProperty('RELEASE_STORE_FILE')) {
                signingConfig signingConfigs.release
            }
            minifyEnabled(true)
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            resValue("string", "GOOGLE_MAPS_API_KEY", googleMapsApiKey)
            resValue("string", "mapbox_access_token", mapboxAccessToken)

            matchingFallbacks = ['release'] // So other modules use release build type for this
        }

        selfSignedRelease {
            signingConfig signingConfigs.selfSignedRelease

            minifyEnabled(true)
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            resValue("string", "GOOGLE_MAPS_API_KEY", googleMapsApiKey)
            resValue("string", "mapbox_access_token", mapboxAccessToken)

            matchingFallbacks = ['release'] // So other modules use release build type for this
        }

        debug {
            debuggable(true)
            resValue("string", "GOOGLE_MAPS_API_KEY", googleMapsApiKey)
            resValue("string", "mapbox_access_token", mapboxAccessToken)
            buildConfigField("String", "ENTITIES_FILTER_TEST_PROJECT_URL", "\"$entitiesFilterTestProjectUrl\"")
            buildConfigField("String", "ENTITIES_FILTER_SEARCH_TEST_PROJECT_URL", "\"$entitiesFilterSearchTestProjectUrl\"")
        }
    }

    applicationVariants.configureEach { variant ->
        if (variant.getName() == "selfSignedRelease" || variant.getName() == "odkCollectRelease") {
            variant.outputs.configureEach { output ->
                outputFileName = new File(outputFileName.replace("${variant.getName()}.apk", "${defaultConfig.versionName}.apk"))
            }
        }
    }

    packaging {
        resources {
            excludes += ['META-INF/ASL-2.0.txt', 'META-INF/LGPL-3.0.txt', 'org/bouncycastle/pqc/crypto/picnic/lowmcL5.bin.properties', 'org/bouncycastle/pqc/crypto/picnic/lowmcL3.bin.properties', 'org/bouncycastle/pqc/crypto/picnic/lowmcL1.bin.properties']

            // These library licenses will be referenced in-app

            // Pick first occurrence of any files that cause conflicts
            pickFirsts += ['META-INF/DEPENDENCIES', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/NOTICE', 'META-INF/NOTICE.txt', 'META-INF/services/com.fasterxml.jackson.core.JsonFactory', 'META-INF/services/com.fasterxml.jackson.core.ObjectCodec', 'META-INF/services/javax.ws.rs.ext.MessageBodyReader', 'META-INF/services/javax.ws.rs.ext.MessageBodyWriter', 'draftv4/schema', 'draftv3/schema']
        }

        // To ensure that ODK Collect is installable on all devices, we don't use
        // abiFilters to exclude any ABIs; but to keep the APK slim, we include
        // the Mapbox native library only for 32-bit and 64-bit ARM devices and
        // omit it for all X86 devices.
        if (!project.hasProperty("x86Libs")) {
            exclude 'lib/x86/libmapbox-maps.so'
            exclude 'lib/x86/libmapbox-common.so'
            exclude 'lib/x86/libc++_shared.so'
            exclude 'lib/x86_64/libmapbox-maps.so'
            exclude 'lib/x86_64/libmapbox-common.so'
            exclude 'lib/x86_64/libc++_shared.so'
        }

        /* Exclude large properties files used by BouncyCastle's Picnic implementation (which
           Collect doesn't use). */
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true

            all {
                minHeapSize = '512m'
                maxHeapSize = project.properties['test.heap.max']
            }
        }
    }

    lint {
        abortOnError true
        checkDependencies true
        checkGeneratedSources true
        htmlReport true
        lintConfig file("$rootDir/config/lint.xml")
        xmlReport true
    }
    namespace 'org.odk.collect.android'
}

configurations.all {
    resolutionStrategy {
        cacheDynamicVersionsFor(0, 'seconds')
        cacheChangingModulesFor(0, 'seconds')

        force 'org.objenesis:objenesis:2.6'

        // Newer Jackson versions cannot be ued until Collect minSDK >= 26 (https://github.com/FasterXML/jackson-databind#android)
        force 'com.fasterxml.jackson.core:jackson-databind:2.13.5'
    }
    
    transitive = true
}

dependencies {
    coreLibraryDesugaring Dependencies.desugar

    implementation project(':shared')
    implementation project(':androidshared')
    implementation project(':nbistubs')
    implementation project(':icons')
    implementation project(':strings')
    implementation project(':material')
    implementation project(':async')
    implementation project(':analytics')
    implementation project(':audio-clips')
    implementation project(':forms')
    implementation project(':audio-recorder')
    implementation project(':projects')
    implementation project(':location')
    implementation project(':geo')
    implementation project(':image-loader')
    implementation project(':errors')
    implementation project(':upgrade')
    implementation project(':permissions')
    implementation(project(':settings')) {
        exclude group: 'joda-time'
    }
    implementation project(':external-app')
    implementation project(':maps')
    implementation project(':osmdroid')
    implementation project(':entities')
    implementation project(':crash-handler')
    implementation project(':selfie-camera')
    implementation project(':qr-code')
    implementation project(':metadata')
    implementation project(':google-maps')
    implementation project(':draw')
    implementation project(':printer')
    implementation project(':lists')
    implementation project(':web-page')
    implementation project(':db')

    if (getSecrets().getProperty('MAPBOX_DOWNLOADS_TOKEN', '') != '') {
        implementation project(':mapbox')
    }

    implementation Dependencies.androidx_startup
    implementation Dependencies.androidx_core_ktx
    implementation Dependencies.androidx_browser
    implementation Dependencies.androidx_appcompat
    implementation Dependencies.androidx_work_runtime

    implementation Dependencies.androidx_preference_ktx
    implementation Dependencies.androidx_fragment_ktx

    implementation Dependencies.android_flexbox

    implementation Dependencies.play_services_maps
    implementation Dependencies.play_services_location
    implementation Dependencies.play_services_oss_licenses

    implementation Dependencies.firebase_analytics
    implementation Dependencies.firebase_crashlytics

    implementation Dependencies.squareup_okhttp
    implementation Dependencies.squareup_okhttp_tls
    implementation Dependencies.burgstaller_okhttp_digest
    
    implementation Dependencies.persian_joda_time
    implementation Dependencies.myanmar_calendar
    implementation Dependencies.bikram_sambat
    implementation Dependencies.commons_io
    implementation (Dependencies.opencsv) {
        exclude group: 'commons-logging'
    }
    implementation(Dependencies.javarosa) {
        exclude group: 'commons-io'
        exclude group: 'joda-time'
        exclude group: 'org.slf4j'
        exclude group: 'org.hamcrest', module: 'hamcrest-all'
    }
    implementation Dependencies.gson
    implementation Dependencies.timber
    implementation Dependencies.slf4j_api
    implementation Dependencies.slf4j_timber

    implementation Dependencies.zxing_android_embedded

    implementation Dependencies.danlew_android_joda

    implementation(Dependencies.jsoup)

    // Android Architecture Components:
    implementation Dependencies.androidx_lifecycle_runtime_ktx
    implementation Dependencies.androidx_lifecycle_livedata_ktx
    implementation Dependencies.androidx_viewpager2

    // Dagger:
    implementation Dependencies.dagger
    annotationProcessor Dependencies.dagger_compiler

    // Needed for injection into Robolectric tests
    testAnnotationProcessor Dependencies.dagger_compiler

    // Dagger Android:
    implementation Dependencies.dagger_android
    annotationProcessor Dependencies.dagger_android_processor

    implementation Dependencies.armen101_audio_recorder_view

    implementation(Dependencies.mp4parser_muxer) {
        exclude group: 'org.hamcrest'
    }

    implementation Dependencies.splashscreen

    testImplementation project(':forms-test')

    // Testing-only dependencies
    testImplementation Dependencies.junit
    testImplementation Dependencies.mockito_inline
    testImplementation Dependencies.mockito_kotlin

    testImplementation project(':androidtest')
    testImplementation(project(path: ':test-shared')) {
        exclude group: 'org.robolectric' // Some tests in `collect_app` don't work with newer Robolectric
    }
    testImplementation(project(":shadows"))
    testImplementation(project(":test-forms"))

    testImplementation Dependencies.robolectric

    testImplementation Dependencies.androidx_test_ext_junit
    testImplementation Dependencies.androidx_arch_core_testing
    testImplementation Dependencies.okhttp3_mockwebserver
    testImplementation Dependencies.squareup_okhttp_tls

    testImplementation Dependencies.hamcrest

    testImplementation Dependencies.androidx_test_espresso_core
    testImplementation Dependencies.androidx_test_espresso_intents
    testImplementation Dependencies.androidx_test_core_ktx

    androidTestImplementation project(':androidtest')
    androidTestImplementation project(':test-forms')

    androidTestImplementation Dependencies.caverock_androidsvg
    androidTestImplementation Dependencies.mockito_android
    androidTestImplementation Dependencies.androidx_test_ext_junit
    androidTestImplementation Dependencies.androidx_test_espresso_core
    androidTestImplementation Dependencies.androidx_arch_core_testing
    androidTestImplementation Dependencies.androidx_test_espresso_contrib
    androidTestImplementation(Dependencies.androidx_test_espresso_intents) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    androidTestImplementation Dependencies.okhttp3_mockwebserver
    androidTestImplementation Dependencies.androidx_work_testing
    androidTestImplementation Dependencies.uiautomator

    debugImplementation project(':fragments-test')
    debugImplementation(project(':test-shared',)) {
        exclude group: 'org.robolectric' // Some tests in `collect_app` don't work with newer Robolectric
    }

    // Real LeakCanary for debug and selfSigned builds only: notifications, analysis, etc
    debugImplementation Dependencies.leakcanary
    selfSignedReleaseImplementation Dependencies.leakcanary
}

// Must be at bottom to prevent dependency collisions
// https://developers.google.com/android/guides/google-services-plugin
apply plugin: 'com.google.gms.google-services'

// Must be after google-services to prevent build failure
// https://stackoverflow.com/a/67995305
apply plugin: 'com.google.firebase.crashlytics'
